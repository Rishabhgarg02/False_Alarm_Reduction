import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


dataset = pd.read_csv('adsorber.csv')
X = dataset.iloc[:1382, 2].values
Y = dataset.iloc[:1382, -1].values


plt.scatter(X, Y, color = 'red')
plt.title('Lab Plot')
plt.ylabel('C/Co')
plt.xlabel('time(in min)')
plt.show()


from scipy.interpolate import make_interp_spline
# fit a cubic spline to the data
spline = make_interp_spline(X, Y)
# evaluate the spline over a finer grid
Xfit = np.linspace(X.min(), X.max(), 100)
Yfit = spline(Xfit)


# plot the scatter data and the fitted curve
plt.scatter(X, Y)
plt.plot(Xfit, Yfit, color='red')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Scatter data  with fitted curve')
plt.show()


actual = np.array([])
iter = np.array([])
for i in range(len(Y)):
  if Y[i]<0.1:
    actual = np.append(actual,float(Y[i]))
    iter = np.append(iter,int(i))
print(len(actual))
print(iter
    )


# generate random noise and add it to the data
noise = np.random.normal(scale=0.1, size=len(X))
y_noisy = Y + noise


spline = make_interp_spline(X, y_noisy)


# evaluate the spline over a finer grid
xfit = np.linspace(X.min(), X.max(), 100)
yfit = spline(xfit)


# plot the noisy data
plt.scatter(X, y_noisy)
plt.plot(xfit,yfit,color = 'red')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Scatter data with added noise')
plt.show()


plt.plot(xfit,yfit,color = 'red')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Scatter data with added noise')
plt.show()


b_noisy = np.array([])
for i in range(len(actual)):
  if y_noisy[int(iter[i])]>0.1:
    b_noisy = np.append(b_noisy,float(y_noisy[int(iter[i])]))
print(len(b_noisy))


b_noisy2 = np.array([])
for i in range(len(actual)):
  if y_noisy[int(iter[i])]>0.02:
 
    b_noisy2 = np.append(b_noisy2,float(y_noisy[int(iter[i])]))
print(len(b_noisy2))


!pip install pykalman
!pip install filterpy


from pykalman import KalmanFilter


# apply the Kalman filter
kf = KalmanFilter(initial_state_mean=y_noisy[0], n_dim_obs=1)
filtered_states, _ = kf.filter(y_noisy)


# plot the  filtered data
plt.plot(X, filtered_states, label='Filtered Data')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Noisy Data with Kalman Filter')


plt.legend()
plt.show()


b_filtered = np.array([])
for i in range(len(actual)):
  if filtered_states[int(iter[i])]>0.1:
    b_filtered = np.append(b_filtered,float(filtered_states[int(iter[i])]))
print(len(b_filtered))


R = (len(b_noisy)-len(b_filtered))/len(b_noisy)*100
print(R)


# apply the Kalman filter for 2nd time
kf = KalmanFilter(initial_state_mean=filtered_states[0], n_dim_obs=1)
filtered_states_1, _ = kf.filter(filtered_states)


# plot the  filtered data
plt.plot(X, filtered_states_1, label='Filtered Data')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Noisy Data with Kalman Filter')
plt.legend()
plt.show()


b_filtered_cycle_1 = np.array([])
for i in range(len(actual)):
  if filtered_states_1[int(iter[i])]>0.1:
   b_filtered_cycle_1 = np.append(b_filtered_cycle_1,float(filtered_states_1[int(iter[i])]))
print(len(b_filtered_cycle_1))


# apply the Kalman filter for 3rd time
kf = KalmanFilter(initial_state_mean=filtered_states_1[0], n_dim_obs=1)
filtered_states_2, _ = kf.filter(filtered_states_1)


# plot the  filtered data
plt.plot(X, filtered_states_2, label='Filtered Data')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Noisy Data with Kalman Filter')
plt.legend()
plt.show()


b_filtered_cycle_2 = np.array([])
for i in range(len(actual)):
  if filtered_states_2[int(iter[i])]>0.1:
   b_filtered_cycle_2 = np.append(b_filtered_cycle_2,float(filtered_states_2[int(iter[i])]))
print(len(b_filtered_cycle_2))


# apply the Kalman filter for 4th time
kf = KalmanFilter(initial_state_mean=filtered_states_2[0], n_dim_obs=1)
filtered_states_3, _ = kf.filter(filtered_states_2)


# plot the  filtered data
plt.plot(X, filtered_states_3, label='Filtered Data')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Noisy Data with Kalman Filter')
plt.legend()
plt.show()


b_filtered_cycle_3 = np.array([])
for i in range(len(actual)):
  if filtered_states_3[int(iter[i])]>0.1:
   b_filtered_cycle_3 = np.append(b_filtered_cycle_3,float(filtered_states_3[int(iter[i])]))
print(len(b_filtered_cycle_3))


# apply the Kalman filter for 5th time
kf = KalmanFilter(initial_state_mean=filtered_states_3[0], n_dim_obs=1)
filtered_states_4, _ = kf.filter(filtered_states_3)


# plot the  filtered data
plt.plot(X, filtered_states_4, label='Filtered Data')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Noisy Data with Kalman Filter')
plt.legend()
plt.show()


b_filtered_cycle_4 = np.array([])
for i in range(len(actual)):
  if filtered_states_4[int(iter[i])]>0.1:
   b_filtered_cycle_4 = np.append(b_filtered_cycle_4,float(filtered_states_4[int(iter[i])]))
print(len(b_filtered_cycle_4))


# apply the Kalman filter for 6th time
kf = KalmanFilter(initial_state_mean=filtered_states_4[0], n_dim_obs=1)
filtered_states_5, _ = kf.filter(filtered_states_4)


# plot the  filtered data
plt.plot(X, filtered_states_5, label='Filtered Data')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Noisy Data with Kalman Filter')
plt.legend()
plt.show()


b_filtered_cycle_5 = np.array([])
for i in range(len(actual)):
  if filtered_states_5[int(iter[i])]>0.1:
   b_filtered_cycle_5 = np.append(b_filtered_cycle_5,float(filtered_states_5[int(iter[i])]))
print(len(b_filtered_cycle_5))


# apply the Kalman filter for 7th time


kf = KalmanFilter(initial_state_mean=filtered_states_5[0], n_dim_obs=1)
filtered_states_6, _ = kf.filter(filtered_states_5)


# plot the  filtered data
plt.plot(X, filtered_states_6, label='Filtered Data')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Noisy Data with Kalman Filter')
plt.legend()
plt.show()


b_filtered_cycle_6 = np.array([])
for i in range(len(actual)):
  if filtered_states_6[int(iter[i])]>0.1:
   b_filtered_cycle_6 = np.append(b_filtered_cycle_6,float(filtered_states_6[int(iter[i])]))
print(len(b_filtered_cycle_6))


# apply the Kalman filter for 8th time
kf = KalmanFilter(initial_state_mean=filtered_states_6[0], n_dim_obs=1)
filtered_states_7, _ = kf.filter(filtered_states_6)


# plot the  filtered data
# plot the  filtered data
plt.plot(Xfit, Yfit, color='blue')
plt.plot(xfit,yfit,color = 'lime', label= "Noisy Data")
plt.plot(X, filtered_states_7,color= 'red', label='Filtered Data')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Noisy Data with Kalman Filter')
plt.legend()
plt.show()


b_filtered_cycle_7 = np.array([])
for i in range(len(actual)):
  if filtered_states_7[int(iter[i])]>0.1:
   b_filtered_cycle_7 = np.append(b_filtered_cycle_7,float(filtered_states_7[int(iter[i])]))
print(len(b_filtered_cycle_7))


from scipy.interpolate import make_interp_spline


# fit a cubic spline to the data
spline = make_interp_spline(X, Y)


# evaluate the spline over a finer grid
xfit = np.linspace(X.min(), X.max(), 100)
yfit = spline(xfit)


# plot the scatter data and the fitted curve
plt.plot(xfit, yfit, color='red')
plt.vlines(x=[X[(int(iter[0]))],X[(int(iter[961]))]],ymin = 0,ymax = 1, colors='aqua', ls='--', lw=2, label='vline_multiple - full height')
plt.plot(xfit, yfit, color='red')


# add labels and title
plt.xlabel('time(in min)')
plt.ylabel('C/Co')
plt.title('Scatter data  with fitted curve')
plt.show()


print(X[int(iter[0])])
